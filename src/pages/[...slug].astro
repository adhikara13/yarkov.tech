---
import type { MDXInstance } from "astro";

import { DEFAULT_LANGUAGE } from "@root/config";
import ArticleLayout from "@layouts/article.astro";
import AlternateLangLink from "@components/AlternateLangLink";
import { getLanguageFromURL } from "@root/utils";
import { formatArticlesByLangs, useTranslation } from "@i18n/utils";
import languages from "@i18n/languages";

const t = useTranslation(Astro);
const siteLang = getLanguageFromURL(Astro.url.pathname);
const canonicalUrl = new URL(Astro.url.pathname, Astro.site);

export interface Props {
	article: MDXInstance<ArticleType>;
	availableLangs: AvailableLang[];
}

type AvailableLang = {
	lang: LanguageKeys;
	slug: any;
};

export async function getStaticPaths() {
	const modules = import.meta.glob<MDXInstance<ArticleType>>("../../content/articles/**/*.mdx", { eager: true });
	const entries = Object.keys(modules).map((key) => [key, key.split("/").slice(6)[0]]);
	const formatted = formatArticlesByLangs(modules);

	return entries
		.map(([key, lang]) => {
			const article = modules[key];
			const dirName = key.split("/").at(-3);
			const published_at = new Date(article.frontmatter.published_at).toLocaleDateString("en-CA");
			const slug = `${lang !== DEFAULT_LANGUAGE ? `${lang}/` : ""}blog/${published_at}/${article.frontmatter.slug}`;
			const availableLangs: AvailableLang[] = Object.keys(formatted[dirName]).map((lang: LanguageKeys) => ({
				lang,
				slug: formatted[dirName][lang].frontmatter.slug,
			}));

			return { params: { slug }, props: { article, availableLangs } };
		})
		.filter(({ props: { article } }) => !article.frontmatter.draft);
}

const {
	article: { Content, frontmatter },
	availableLangs,
} = Astro.props as Props;
---

<ArticleLayout lang={siteLang} content={frontmatter} canonicalUrl={canonicalUrl.href}>
	{
		availableLangs.length > 1 && (
			<div class="languages-available">
				{t("article.availableOn")}:
				{availableLangs
					.filter((entry) => entry.lang !== siteLang)
					.map((entry) => (
						<AlternateLangLink slug={entry.slug} lang={entry.lang}>
							{languages[entry.lang]}
						</AlternateLangLink>
					))
					.reduce((prev, curr) => [prev, ", ", curr])}
			</div>
		)
	}
	<Content />
</ArticleLayout>
